1.创建版本库
   $ mkdir 库名
   $ cd 库名
   $pwd 切换目录
2.通过git init命令把这个目录变成Git可以管理的仓库 $ git init
   瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见
3.把文件添加到版本库
   第一步，用命令git add告诉Git，把文件添加到仓库  $ git add readme.txt
   第二步，用命令git commit告诉Git，把文件提交到仓库：$ git commit -m     "wrote a readme file"
4.git status命令可以让我们时刻掌握仓库当前的状态
  用git diff可以查看修改内容,状态改变
5.git log命令显示从最近到最远的提交日志并显示commit id
  首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
我们要把当前版本回退到上一个版本,就可以使用git reset命令：
$ git reset --hard HEAD^
  总之，穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
  要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本

6.工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
   前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
7.
git commit 只是把放在暂存区的修改提交（也就是说已经被git add）,如果没有执行git add则git commit不会提交

8.撤销修改
  a.命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态
 b.用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
总结：如果文件内容是在git add之前修改或者是在添加到暂存区之后修改就用 git checkout -- file。如果是想把暂存区的修改撤掉，重新放回工作区就用 git reset HEAD file。如果是在提交之后（git commit）则就用git reset -- hard (commit id)
9.删除文件
  用rm file删除工作区文件
  用 git rm file 删除版本库的文件并用git commit file 提交
  

10.远程仓库
  由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以要创建SSH KEY。如果有.ssh目录并且目录下有id_rsa和id_rsa.pub这两个文件。然后登录github,打开SSH Keys页面，id_rsa.pub内容复制到key文本框，最后点击add。如果没有.ssh目录则需要通过 $ ssh-keygen -t rsa -C "youremail@example.com"先创建SSH Key。
  添加远程库首先在github中创建一个库（respository）然后在本地库上使用$ git remote add origin git@github.com:zhangliling/learngit命令实现关联，关联后使用命令git push -u origin master实现第一次推送master分支的所有内容，此后每次本地提交就可以使用命令git push origin master推送最新修改。
   远程库的克隆
先创建一个远程库，然后用$ git clone git@github.com:zhangliling/gitskills.git克隆一个本地库。总结 要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
11.分支管理
   HEAD指向的就是当前分支，master是指向主分支。每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长
   a.首先，我们创建dev分支，然后切换到dev分支  $ git checkout -b dev
   git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
   $ git branch dev
   $ git checkout dev
 b. 用git branch命令查看当前分支： $ git branch
 c.git merge命令用于合并指定分支到当前分支。 $ git merge dev
 d.删除dev分支$ git branch -d dev
 e.用带参数的git log也可以看到分支的合并情况
    $ git log --graph --pretty=oneline --abbrev-commit
   总结：当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用git log --graph命令可以看到分支合并图。

12.分支管理策略
 通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
例如：准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
    $ git merge --no-ff -m "merge with no-ff" dev

13.Bug分支
   每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
  如果当你在某个分支开发时，还没有提交需要修复一个bug你可以用stash把当前工作现场“储藏”起来，等以后恢复现场后继续工作 $ git stash
 修复bug:首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支$ git checkout master 然后$ git checkout -b issue-101
现在修复bug，$ git add readme.txt 和$ git commit -m "fix bug 101"修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：修复完成后用$ git stash list找到工作现场。然后需要恢复一下，有两种方法：一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了回到工作现场。
14.feature分支
   开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除
15.多人协作
   多人协作的工作模式通常是这样：
    首先，可以试图用git push origin branch-name推送自己的修改；
    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    如果合并有冲突，则解决冲突，并在本地提交；
    没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
-------------------------------------------------------------------------
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突
16.标签管理
   a.创建标签
    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    git tag -a <tagname> -m "blablabla..."可以指定标签信息；

    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

    命令git tag可以查看所有标签。
    b.操作标签
    命令git push origin <tagname>可以推送一个本地标签；
    命令git push origin --tags可以推送全部未推送过的本地标签；
    命令git tag -d <tagname>可以删除一个本地标签；
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。













































